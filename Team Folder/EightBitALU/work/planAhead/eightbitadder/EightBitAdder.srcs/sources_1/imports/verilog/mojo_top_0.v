/*
   This file was generated automatically by the Mojo IDE version B1.3.3.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    output reg [7:0] led,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip
  );
  
  
  
  reg rst;
  
  wire [8-1:0] M_adder_s;
  wire [8-1:0] M_adder_xb;
  reg [8-1:0] M_adder_a;
  reg [8-1:0] M_adder_b;
  reg [6-1:0] M_adder_alufn;
  adder8_1 adder (
    .a(M_adder_a),
    .b(M_adder_b),
    .alufn(M_adder_alufn),
    .s(M_adder_s),
    .xb(M_adder_xb)
  );
  
  wire [1-1:0] M_zvn_z;
  wire [1-1:0] M_zvn_v;
  wire [1-1:0] M_zvn_n;
  reg [8-1:0] M_zvn_s;
  reg [8-1:0] M_zvn_a;
  reg [8-1:0] M_zvn_xb;
  zvn_2 zvn (
    .s(M_zvn_s),
    .a(M_zvn_a),
    .xb(M_zvn_xb),
    .z(M_zvn_z),
    .v(M_zvn_v),
    .n(M_zvn_n)
  );
  
  wire [8-1:0] M_boole_boole;
  reg [8-1:0] M_boole_a;
  reg [8-1:0] M_boole_b;
  reg [6-1:0] M_boole_alufn;
  boole8_3 boole (
    .a(M_boole_a),
    .b(M_boole_b),
    .alufn(M_boole_alufn),
    .boole(M_boole_boole)
  );
  
  wire [8-1:0] M_cmp_cmp;
  reg [1-1:0] M_cmp_z;
  reg [1-1:0] M_cmp_v;
  reg [1-1:0] M_cmp_n;
  reg [6-1:0] M_cmp_alufn;
  compare8_4 cmp (
    .z(M_cmp_z),
    .v(M_cmp_v),
    .n(M_cmp_n),
    .alufn(M_cmp_alufn),
    .cmp(M_cmp_cmp)
  );
  
  wire [8-1:0] M_shift_shift;
  reg [8-1:0] M_shift_a;
  reg [8-1:0] M_shift_b;
  reg [6-1:0] M_shift_alufn;
  shift8_5 shift (
    .a(M_shift_a),
    .b(M_shift_b),
    .alufn(M_shift_alufn),
    .shift(M_shift_shift)
  );
  
  wire [8-1:0] M_mux_out;
  reg [8-1:0] M_mux_s;
  reg [8-1:0] M_mux_boole;
  reg [8-1:0] M_mux_cmp;
  reg [8-1:0] M_mux_shift;
  reg [6-1:0] M_mux_alufn;
  mux_6 mux (
    .s(M_mux_s),
    .boole(M_mux_boole),
    .cmp(M_mux_cmp),
    .shift(M_mux_shift),
    .alufn(M_mux_alufn),
    .out(M_mux_out)
  );
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_7 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    led = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
    io_led = 24'h000000;
    io_seg = 8'hff;
    io_sel = 4'hf;
    M_adder_a = io_dip[0+0+7-:8];
    M_adder_b = io_dip[8+0+7-:8];
    M_adder_alufn = io_dip[16+0+5-:6];
    M_zvn_a = io_dip[0+7-:8];
    M_zvn_xb = M_adder_xb;
    M_zvn_s = M_adder_s;
    M_boole_a = io_dip[0+7-:8];
    M_boole_b = io_dip[8+7-:8];
    M_boole_alufn = io_dip[16+0+5-:6];
    M_cmp_z = M_zvn_z;
    M_cmp_v = M_zvn_v;
    M_cmp_n = M_zvn_n;
    M_cmp_alufn = io_dip[16+0+5-:6];
    M_shift_a = io_dip[0+7-:8];
    M_shift_b = io_dip[8+7-:8];
    M_shift_alufn = io_dip[16+0+5-:6];
    M_mux_alufn = io_dip[16+0+5-:6];
    M_mux_s = M_adder_s;
    M_mux_cmp = M_cmp_cmp;
    M_mux_boole = M_boole_boole;
    M_mux_shift = M_shift_shift;
    io_led[0+0+7-:8] = M_adder_s;
    io_led[8+0+7-:8] = M_adder_xb;
  end
endmodule
