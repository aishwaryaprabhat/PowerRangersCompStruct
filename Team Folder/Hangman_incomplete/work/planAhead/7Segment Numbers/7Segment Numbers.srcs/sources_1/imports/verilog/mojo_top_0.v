/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [6:0] displayp1,
    output reg [3:0] displayselp1,
    output reg [6:0] displayp2,
    output reg [3:0] displayselp2,
    input [3:0] keypadp1in,
    output reg [3:0] keypadp1out,
    input [3:0] keypadp2in,
    output reg [3:0] keypadp2out,
    output reg [7:0] matrixcol,
    output reg [7:0] matrixrow
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [7-1:0] M_p1_seg;
  wire [4-1:0] M_p1_sel;
  reg [32-1:0] M_p1_values;
  multi_seven_seg_2 p1 (
    .clk(clk),
    .rst(rst),
    .values(M_p1_values),
    .seg(M_p1_seg),
    .sel(M_p1_sel)
  );
  wire [7-1:0] M_p2_seg;
  wire [4-1:0] M_p2_sel;
  reg [32-1:0] M_p2_values;
  multi_seven_seg_2 p2 (
    .clk(clk),
    .rst(rst),
    .values(M_p2_values),
    .seg(M_p2_seg),
    .sel(M_p2_sel)
  );
  wire [4-1:0] M_keypad1_out;
  wire [8-1:0] M_keypad1_key;
  reg [4-1:0] M_keypad1_in;
  keypad_reader_4 keypad1 (
    .clk(clk),
    .rst(rst),
    .in(M_keypad1_in),
    .out(M_keypad1_out),
    .key(M_keypad1_key)
  );
  wire [4-1:0] M_keypad2_out;
  wire [8-1:0] M_keypad2_key;
  reg [4-1:0] M_keypad2_in;
  keypad_reader_4 keypad2 (
    .clk(clk),
    .rst(rst),
    .in(M_keypad2_in),
    .out(M_keypad2_out),
    .key(M_keypad2_key)
  );
  reg [2:0] M_regcounter_d, M_regcounter_q = 1'h0;
  reg [7:0] M_key_d, M_key_q = 1'h0;
  reg [2:0] M_lives_d, M_lives_q = 1'h0;
  wire [8-1:0] M_reg1_out;
  reg [1-1:0] M_reg1_en;
  reg [8-1:0] M_reg1_data;
  register_6 reg1 (
    .clk(clk),
    .rst(rst),
    .en(M_reg1_en),
    .data(M_reg1_data),
    .out(M_reg1_out)
  );
  wire [8-1:0] M_reg2_out;
  reg [1-1:0] M_reg2_en;
  reg [8-1:0] M_reg2_data;
  register_6 reg2 (
    .clk(clk),
    .rst(rst),
    .en(M_reg2_en),
    .data(M_reg2_data),
    .out(M_reg2_out)
  );
  wire [8-1:0] M_reg3_out;
  reg [1-1:0] M_reg3_en;
  reg [8-1:0] M_reg3_data;
  register_6 reg3 (
    .clk(clk),
    .rst(rst),
    .en(M_reg3_en),
    .data(M_reg3_data),
    .out(M_reg3_out)
  );
  wire [8-1:0] M_reg4_out;
  reg [1-1:0] M_reg4_en;
  reg [8-1:0] M_reg4_data;
  register_6 reg4 (
    .clk(clk),
    .rst(rst),
    .en(M_reg4_en),
    .data(M_reg4_data),
    .out(M_reg4_out)
  );
  wire [8-1:0] M_reg5_out;
  reg [1-1:0] M_reg5_en;
  reg [8-1:0] M_reg5_data;
  register_6 reg5 (
    .clk(clk),
    .rst(rst),
    .en(M_reg5_en),
    .data(M_reg5_data),
    .out(M_reg5_out)
  );
  wire [8-1:0] M_reg6_out;
  reg [1-1:0] M_reg6_en;
  reg [8-1:0] M_reg6_data;
  register_6 reg6 (
    .clk(clk),
    .rst(rst),
    .en(M_reg6_en),
    .data(M_reg6_data),
    .out(M_reg6_out)
  );
  wire [8-1:0] M_reg7_out;
  reg [1-1:0] M_reg7_en;
  reg [8-1:0] M_reg7_data;
  register_6 reg7 (
    .clk(clk),
    .rst(rst),
    .en(M_reg7_en),
    .data(M_reg7_data),
    .out(M_reg7_out)
  );
  wire [8-1:0] M_reg8_out;
  reg [1-1:0] M_reg8_en;
  reg [8-1:0] M_reg8_data;
  register_6 reg8 (
    .clk(clk),
    .rst(rst),
    .en(M_reg8_en),
    .data(M_reg8_data),
    .out(M_reg8_out)
  );
  
  always @* begin
    M_lives_d = M_lives_q;
    M_regcounter_d = M_regcounter_q;
    M_key_d = M_key_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_keypad1_in = keypadp1in;
    keypadp1out = M_keypad1_out;
    M_keypad2_in = keypadp2in;
    keypadp2out = M_keypad2_out;
    M_reg1_en = 1'h0;
    M_reg1_data = 8'h01;
    M_reg2_en = 1'h0;
    M_reg2_data = 8'h01;
    M_reg3_en = 1'h0;
    M_reg3_data = 8'h01;
    M_reg4_en = 1'h0;
    M_reg4_data = 8'h01;
    M_reg5_en = 1'h0;
    M_reg5_data = 8'h01;
    M_reg6_en = 1'h0;
    M_reg6_data = 8'h01;
    M_reg7_en = 1'h0;
    M_reg7_data = 8'h01;
    M_reg8_en = 1'h0;
    M_reg8_data = 8'h01;
    if (~(M_keypad1_key == 8'h00) && M_regcounter_q < 3'h4) begin
      
      case (M_regcounter_q)
        1'h0: begin
          M_reg1_en = 1'h1;
          M_reg1_data = M_keypad1_key;
          M_regcounter_d = 1'h1;
        end
        1'h1: begin
          if (!(M_reg1_out == M_keypad1_key)) begin
            M_reg2_en = 1'h1;
            M_reg2_data = M_keypad1_key;
            M_regcounter_d = 2'h2;
          end
        end
        2'h2: begin
          if (!(M_reg2_out == M_keypad1_key)) begin
            M_reg3_en = 1'h1;
            M_reg3_data = M_keypad1_key;
            M_regcounter_d = 2'h3;
          end
        end
        2'h3: begin
          if (!(M_reg3_out == M_keypad1_key)) begin
            M_reg4_en = 1'h1;
            M_reg4_data = M_keypad1_key;
            M_regcounter_d = 3'h4;
          end
        end
      endcase
    end
    if (~(M_keypad2_key == 8'h00) && M_regcounter_q > 2'h3) begin
      if (!(M_key_q == M_keypad2_key)) begin
        if (M_reg1_out == M_keypad2_key) begin
          M_reg5_en = 1'h1;
          M_reg5_data = M_keypad2_key;
        end else begin
          if (M_reg2_out == M_keypad2_key) begin
            M_reg6_en = 1'h1;
            M_reg6_data = M_keypad2_key;
          end else begin
            if (M_reg3_out == M_keypad2_key) begin
              M_reg7_en = 1'h1;
              M_reg7_data = M_keypad2_key;
            end else begin
              if (M_reg4_out == M_keypad2_key) begin
                M_reg8_en = 1'h1;
                M_reg8_data = M_keypad2_key;
              end else begin
                M_lives_d = M_lives_q + 1'h1;
              end
            end
          end
        end
        M_key_d = M_keypad2_key;
      end
    end
    M_p1_values = {M_reg1_out, M_reg2_out, M_reg3_out, M_reg4_out};
    displayp1 = ~M_p1_seg;
    displayselp1 = M_p1_sel;
    if (!(M_lives_q == 3'h5)) begin
      M_p2_values = {M_reg5_out, M_reg6_out, M_reg7_out, M_reg8_out};
    end else begin
      M_p2_values = 32'h28811284;
    end
    displayp2 = ~M_p2_seg;
    displayselp2 = M_p2_sel;
    matrixcol = M_lives_q;
    matrixrow = 8'h00;
    spi_miso = 1'bz;
    spi_channel = 4'bzzzz;
    avr_rx = 1'bz;
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_regcounter_q <= 1'h0;
      M_key_q <= 1'h0;
      M_lives_q <= 1'h0;
    end else begin
      M_regcounter_q <= M_regcounter_d;
      M_key_q <= M_key_d;
      M_lives_q <= M_lives_d;
    end
  end
  
endmodule
