/*
   This file was generated automatically by the Mojo IDE version B1.3.5.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    input eIGHT,
    input sEVEN,
    input sIX,
    input fIVE,
    input fOUR,
    input tHREE,
    input tWO,
    input oNE
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  reg [4:0] M_counter_d, M_counter_q = 1'h0;
  wire [1-1:0] M_avr_spi_miso;
  wire [4-1:0] M_avr_spi_channel;
  wire [1-1:0] M_avr_tx;
  wire [1-1:0] M_avr_new_sample;
  wire [10-1:0] M_avr_sample;
  wire [4-1:0] M_avr_sample_channel;
  wire [1-1:0] M_avr_tx_busy;
  wire [8-1:0] M_avr_rx_data;
  wire [1-1:0] M_avr_new_rx_data;
  reg [1-1:0] M_avr_cclk;
  reg [1-1:0] M_avr_spi_mosi;
  reg [1-1:0] M_avr_spi_sck;
  reg [1-1:0] M_avr_spi_ss;
  reg [1-1:0] M_avr_rx;
  reg [4-1:0] M_avr_channel;
  reg [8-1:0] M_avr_tx_data;
  reg [1-1:0] M_avr_new_tx_data;
  reg [1-1:0] M_avr_tx_block;
  avr_interface_2 avr (
    .clk(clk),
    .rst(rst),
    .cclk(M_avr_cclk),
    .spi_mosi(M_avr_spi_mosi),
    .spi_sck(M_avr_spi_sck),
    .spi_ss(M_avr_spi_ss),
    .rx(M_avr_rx),
    .channel(M_avr_channel),
    .tx_data(M_avr_tx_data),
    .new_tx_data(M_avr_new_tx_data),
    .tx_block(M_avr_tx_block),
    .spi_miso(M_avr_spi_miso),
    .spi_channel(M_avr_spi_channel),
    .tx(M_avr_tx),
    .new_sample(M_avr_new_sample),
    .sample(M_avr_sample),
    .sample_channel(M_avr_sample_channel),
    .tx_busy(M_avr_tx_busy),
    .rx_data(M_avr_rx_data),
    .new_rx_data(M_avr_new_rx_data)
  );
  wire [8-1:0] M_reg1_out;
  reg [1-1:0] M_reg1_en;
  reg [8-1:0] M_reg1_data;
  register_3 reg1 (
    .clk(clk),
    .rst(rst),
    .en(M_reg1_en),
    .data(M_reg1_data),
    .out(M_reg1_out)
  );
  wire [8-1:0] M_reg2_out;
  reg [1-1:0] M_reg2_en;
  reg [8-1:0] M_reg2_data;
  register_3 reg2 (
    .clk(clk),
    .rst(rst),
    .en(M_reg2_en),
    .data(M_reg2_data),
    .out(M_reg2_out)
  );
  wire [8-1:0] M_reg3_out;
  reg [1-1:0] M_reg3_en;
  reg [8-1:0] M_reg3_data;
  register_3 reg3 (
    .clk(clk),
    .rst(rst),
    .en(M_reg3_en),
    .data(M_reg3_data),
    .out(M_reg3_out)
  );
  wire [8-1:0] M_reg4_out;
  reg [1-1:0] M_reg4_en;
  reg [8-1:0] M_reg4_data;
  register_3 reg4 (
    .clk(clk),
    .rst(rst),
    .en(M_reg4_en),
    .data(M_reg4_data),
    .out(M_reg4_out)
  );
  wire [8-1:0] M_reg5_out;
  reg [1-1:0] M_reg5_en;
  reg [8-1:0] M_reg5_data;
  register_3 reg5 (
    .clk(clk),
    .rst(rst),
    .en(M_reg5_en),
    .data(M_reg5_data),
    .out(M_reg5_out)
  );
  wire [8-1:0] M_reg6_out;
  reg [1-1:0] M_reg6_en;
  reg [8-1:0] M_reg6_data;
  register_3 reg6 (
    .clk(clk),
    .rst(rst),
    .en(M_reg6_en),
    .data(M_reg6_data),
    .out(M_reg6_out)
  );
  wire [8-1:0] M_reg7_out;
  reg [1-1:0] M_reg7_en;
  reg [8-1:0] M_reg7_data;
  register_3 reg7 (
    .clk(clk),
    .rst(rst),
    .en(M_reg7_en),
    .data(M_reg7_data),
    .out(M_reg7_out)
  );
  wire [8-1:0] M_reg8_out;
  reg [1-1:0] M_reg8_en;
  reg [8-1:0] M_reg8_data;
  register_3 reg8 (
    .clk(clk),
    .rst(rst),
    .en(M_reg8_en),
    .data(M_reg8_data),
    .out(M_reg8_out)
  );
  
  always @* begin
    M_counter_d = M_counter_q;
    
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_avr_cclk = cclk;
    M_avr_spi_ss = spi_ss;
    M_avr_spi_mosi = spi_mosi;
    M_avr_spi_sck = spi_sck;
    M_avr_rx = avr_tx;
    M_avr_channel = 4'hf;
    M_avr_tx_block = avr_rx_busy;
    M_avr_tx_data = 1'bz;
    M_avr_new_tx_data = 1'bz;
    spi_miso = M_avr_spi_miso;
    spi_channel = M_avr_spi_channel;
    avr_rx = M_avr_tx;
    M_reg1_en = 1'h0;
    M_reg1_data = 1'h0;
    M_reg2_en = 1'h0;
    M_reg2_data = 1'h0;
    M_reg3_en = 1'h0;
    M_reg3_data = 1'h0;
    M_reg4_en = 1'h0;
    M_reg4_data = 1'h0;
    M_reg5_en = 1'h0;
    M_reg5_data = 1'h0;
    M_reg6_en = 1'h0;
    M_reg6_data = 1'h0;
    M_reg7_en = 1'h0;
    M_reg7_data = 1'h0;
    M_reg8_en = 1'h0;
    M_reg8_data = 1'h0;
    if (eIGHT == 1'h1 && fOUR == 1'h1) begin
      M_counter_d = M_counter_q + 1'h1;
      
      case (M_counter_q)
        1'h0: begin
          M_reg1_en = 1'h1;
          M_reg1_data = 8'h01;
        end
        1'h1: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h01;
        end
        2'h2: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h01;
        end
        2'h3: begin
          M_reg3_en = 1'h1;
          M_reg3_data = 8'h01;
        end
        3'h4: begin
          M_reg4_en = 1'h1;
          M_reg4_data = 8'h01;
        end
        3'h5: begin
          M_reg5_en = 1'h1;
          M_reg5_data = 8'h01;
        end
      endcase
    end
    if (eIGHT == 1'h1 && tHREE == 1'h1) begin
      M_counter_d = M_counter_q + 1'h1;
      
      case (M_counter_q)
        1'h0: begin
          M_reg1_en = 1'h1;
          M_reg1_data = 8'h02;
        end
        1'h1: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h02;
        end
        2'h2: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h02;
        end
        2'h3: begin
          M_reg3_en = 1'h1;
          M_reg3_data = 8'h02;
        end
        3'h4: begin
          M_reg4_en = 1'h1;
          M_reg4_data = 8'h02;
        end
        3'h5: begin
          M_reg5_en = 1'h1;
          M_reg5_data = 8'h02;
        end
      endcase
    end
    if (eIGHT == 1'h1 && tWO == 1'h1) begin
      M_counter_d = M_counter_q + 1'h1;
      
      case (M_counter_q)
        1'h0: begin
          M_reg1_en = 1'h1;
          M_reg1_data = 8'h03;
        end
        1'h1: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h03;
        end
        2'h2: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h03;
        end
        2'h3: begin
          M_reg3_en = 1'h1;
          M_reg3_data = 8'h03;
        end
        3'h4: begin
          M_reg4_en = 1'h1;
          M_reg4_data = 8'h03;
        end
        3'h5: begin
          M_reg5_en = 1'h1;
          M_reg5_data = 8'h03;
        end
      endcase
    end
    if (eIGHT == 1'h1 && oNE == 1'h1) begin
      M_counter_d = M_counter_q + 1'h1;
      
      case (M_counter_q)
        1'h0: begin
          M_reg1_en = 1'h1;
          M_reg1_data = 8'h04;
        end
        1'h1: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h04;
        end
        2'h2: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h04;
        end
        2'h3: begin
          M_reg3_en = 1'h1;
          M_reg3_data = 8'h04;
        end
        3'h4: begin
          M_reg4_en = 1'h1;
          M_reg4_data = 8'h04;
        end
        3'h5: begin
          M_reg5_en = 1'h1;
          M_reg5_data = 8'h04;
        end
      endcase
    end
    if (sEVEN == 1'h1 && fOUR == 1'h1) begin
      M_counter_d = M_counter_q + 1'h1;
      
      case (M_counter_q)
        1'h0: begin
          M_reg1_en = 1'h1;
          M_reg1_data = 8'h05;
        end
        1'h1: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h05;
        end
        2'h2: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h05;
        end
        2'h3: begin
          M_reg3_en = 1'h1;
          M_reg3_data = 8'h05;
        end
        3'h4: begin
          M_reg4_en = 1'h1;
          M_reg4_data = 8'h05;
        end
        3'h5: begin
          M_reg5_en = 1'h1;
          M_reg5_data = 8'h05;
        end
      endcase
    end
    if (sEVEN == 1'h1 && tHREE == 1'h1) begin
      M_counter_d = M_counter_q + 1'h1;
      
      case (M_counter_q)
        1'h0: begin
          M_reg1_en = 1'h1;
          M_reg1_data = 8'h06;
        end
        1'h1: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h06;
        end
        2'h2: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h06;
        end
        2'h3: begin
          M_reg3_en = 1'h1;
          M_reg3_data = 8'h06;
        end
        3'h4: begin
          M_reg4_en = 1'h1;
          M_reg4_data = 8'h06;
        end
        3'h5: begin
          M_reg5_en = 1'h1;
          M_reg5_data = 8'h06;
        end
      endcase
    end
    if (sEVEN == 1'h1 && tWO == 1'h1) begin
      M_counter_d = M_counter_q + 1'h1;
      
      case (M_counter_q)
        1'h0: begin
          M_reg1_en = 1'h1;
          M_reg1_data = 8'h07;
        end
        1'h1: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h07;
        end
        2'h2: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h07;
        end
        2'h3: begin
          M_reg3_en = 1'h1;
          M_reg3_data = 8'h07;
        end
        3'h4: begin
          M_reg4_en = 1'h1;
          M_reg4_data = 8'h07;
        end
        3'h5: begin
          M_reg5_en = 1'h1;
          M_reg5_data = 8'h07;
        end
      endcase
    end
    if (sEVEN == 1'h1 && oNE == 1'h1) begin
      M_counter_d = M_counter_q + 1'h1;
      
      case (M_counter_q)
        1'h0: begin
          M_reg1_en = 1'h1;
          M_reg1_data = 8'h08;
        end
        1'h1: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h08;
        end
        2'h2: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h08;
        end
        2'h3: begin
          M_reg3_en = 1'h1;
          M_reg3_data = 8'h08;
        end
        3'h4: begin
          M_reg4_en = 1'h1;
          M_reg4_data = 8'h08;
        end
        3'h5: begin
          M_reg5_en = 1'h1;
          M_reg5_data = 8'h08;
        end
      endcase
    end
    if (sIX == 1'h1 && fOUR == 1'h1) begin
      M_counter_d = M_counter_q + 1'h1;
      
      case (M_counter_q)
        1'h0: begin
          M_reg1_en = 1'h1;
          M_reg1_data = 8'h09;
        end
        1'h1: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h09;
        end
        2'h2: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h09;
        end
        2'h3: begin
          M_reg3_en = 1'h1;
          M_reg3_data = 8'h09;
        end
        3'h4: begin
          M_reg4_en = 1'h1;
          M_reg4_data = 8'h09;
        end
        3'h5: begin
          M_reg5_en = 1'h1;
          M_reg5_data = 8'h09;
        end
      endcase
    end
    if (sIX == 1'h1 && tHREE == 1'h1) begin
      M_counter_d = M_counter_q + 1'h1;
      
      case (M_counter_q)
        1'h0: begin
          M_reg1_en = 1'h1;
          M_reg1_data = 8'h0a;
        end
        1'h1: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h0a;
        end
        2'h2: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h0a;
        end
        2'h3: begin
          M_reg3_en = 1'h1;
          M_reg3_data = 8'h0a;
        end
        3'h4: begin
          M_reg4_en = 1'h1;
          M_reg4_data = 8'h0a;
        end
        3'h5: begin
          M_reg5_en = 1'h1;
          M_reg5_data = 8'h0a;
        end
      endcase
    end
    if (sIX == 1'h1 && tWO == 1'h1) begin
      M_counter_d = M_counter_q + 1'h1;
      
      case (M_counter_q)
        1'h0: begin
          M_reg1_en = 1'h1;
          M_reg1_data = 8'h0b;
        end
        1'h1: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h0b;
        end
        2'h2: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h0b;
        end
        2'h3: begin
          M_reg3_en = 1'h1;
          M_reg3_data = 8'h0b;
        end
        3'h4: begin
          M_reg4_en = 1'h1;
          M_reg4_data = 8'h0b;
        end
        3'h5: begin
          M_reg5_en = 1'h1;
          M_reg5_data = 8'h0b;
        end
      endcase
    end
    if (sIX == 1'h1 && oNE == 1'h1) begin
      M_counter_d = M_counter_q + 1'h1;
      
      case (M_counter_q)
        1'h0: begin
          M_reg1_en = 1'h1;
          M_reg1_data = 8'h0c;
        end
        1'h1: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h0c;
        end
        2'h2: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h0c;
        end
        2'h3: begin
          M_reg3_en = 1'h1;
          M_reg3_data = 8'h0c;
        end
        3'h4: begin
          M_reg4_en = 1'h1;
          M_reg4_data = 8'h0c;
        end
        3'h5: begin
          M_reg5_en = 1'h1;
          M_reg5_data = 8'h0c;
        end
      endcase
    end
    if (fIVE == 1'h1 && fOUR == 1'h1) begin
      M_counter_d = M_counter_q + 1'h1;
      
      case (M_counter_q)
        1'h0: begin
          M_reg1_en = 1'h1;
          M_reg1_data = 8'h0d;
        end
        1'h1: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h0d;
        end
        2'h2: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h0d;
        end
        2'h3: begin
          M_reg3_en = 1'h1;
          M_reg3_data = 8'h0d;
        end
        3'h4: begin
          M_reg4_en = 1'h1;
          M_reg4_data = 8'h0d;
        end
        3'h5: begin
          M_reg5_en = 1'h1;
          M_reg5_data = 8'h0d;
        end
      endcase
    end
    if (fIVE == 1'h1 && tHREE == 1'h1) begin
      M_counter_d = M_counter_q + 1'h1;
      
      case (M_counter_q)
        1'h0: begin
          M_reg1_en = 1'h1;
          M_reg1_data = 8'h0e;
        end
        1'h1: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h0e;
        end
        2'h2: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h0e;
        end
        2'h3: begin
          M_reg3_en = 1'h1;
          M_reg3_data = 8'h0e;
        end
        3'h4: begin
          M_reg4_en = 1'h1;
          M_reg4_data = 8'h0e;
        end
        3'h5: begin
          M_reg5_en = 1'h1;
          M_reg5_data = 8'h0e;
        end
      endcase
    end
    if (fIVE == 1'h1 && tWO == 1'h1) begin
      M_counter_d = M_counter_q + 1'h1;
      
      case (M_counter_q)
        1'h0: begin
          M_reg1_en = 1'h1;
          M_reg1_data = 8'h0f;
        end
        1'h1: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h0f;
        end
        2'h2: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h0f;
        end
        2'h3: begin
          M_reg3_en = 1'h1;
          M_reg3_data = 8'h0f;
        end
        3'h4: begin
          M_reg4_en = 1'h1;
          M_reg4_data = 8'h0f;
        end
        3'h5: begin
          M_reg5_en = 1'h1;
          M_reg5_data = 8'h0f;
        end
      endcase
    end
    if (fIVE == 1'h1 && oNE == 1'h1) begin
      M_counter_d = M_counter_q + 1'h1;
      
      case (M_counter_q)
        1'h0: begin
          M_reg1_en = 1'h1;
          M_reg1_data = 8'h10;
        end
        1'h1: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h10;
        end
        2'h2: begin
          M_reg2_en = 1'h1;
          M_reg2_data = 8'h10;
        end
        2'h3: begin
          M_reg3_en = 1'h1;
          M_reg3_data = 8'h10;
        end
        3'h4: begin
          M_reg4_en = 1'h1;
          M_reg4_data = 8'h10;
        end
        3'h5: begin
          M_reg5_en = 1'h1;
          M_reg5_data = 8'h10;
        end
      endcase
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
    end
  end
  
endmodule
