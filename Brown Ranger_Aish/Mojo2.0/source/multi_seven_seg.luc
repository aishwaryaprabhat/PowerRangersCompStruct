module multi_seven_seg #(
    DIGITS = 4 : DIGITS > 0,
    DIV = 16 : DIV >= 0
  )(
    input clk,                // clock
    input rst,                // reset
    input values [DIGITS][8], // values to show
    output seg [7],           // LED segments
    output sel [DIGITS]       // Digit select
  ) {
 
  // number of bits required to store DIGITS-1
  const DIGIT_BITS = $clog2(DIGITS);
 
  .clk(clk){
  
  .rst(rst) {
    counter ctr (#DIV(DIV), #SIZE(DIGIT_BITS), #TOP(DIGITS-1));
    }
  }
  seven_seg seg_dec;                      // segment decoder
  decoder dec;                      // digit decoder
 
  always {
    seg_dec.letter = values[ctr.value];    // select the value for the active digit
    seg = seg_dec.segs;                   // output the decoded value
 
    dec.in = ctr.value;             // decode active digit to one-hot
    sel = dec.out;                  // output the active digit
  }
}