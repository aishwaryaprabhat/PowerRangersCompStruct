module mojo_top (
        input clk,              // 50MHz clock
        input rst_n,            // reset button (active low)
//output led [8],         // 8 user controllable LEDs
        input cclk,             // configuration clock, AVR ready when high
        output spi_miso,        // AVR SPI MISO
        input spi_ss,           // AVR SPI Slave Select
        input spi_mosi,         // AVR SPI MOSI
        input spi_sck,          // AVR SPI Clock
        output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
        input avr_tx,           // AVR TX (FPGA RX)
        output avr_rx,          // AVR RX (FPGA TX)
        input avr_rx_busy,       // AVR RX buffer full

        //Player 1 inputs
        input eIGHT,
        input sEVEN,
        input sIX,
        input fIVE,
        input fOUR,
        input tHREE,
        input tWO,
        input oNE,

        //Player 2 inputs
        input eight2,
        input seven2,
        input six2,
        input five2,
        input four2,
        input three2,
        input two2,
        input one2
        ) {

        sig rst;                  // reset signal

        .clk(clk) {
        // The reset conditione2r is used to synchronize the reset signal to the FPGA
        // clock. This ensures the entire FPGA comes out of reset at the same time.
        reset_conditioner reset_cond;

        .rst(rst){
        dff counter[5];
        avr_interface avr;
        register reg1(#WIDTH(8));
        register reg2(#WIDTH(8));
        register reg3(#WIDTH(8));
        register reg4(#WIDTH(8));
        register reg5(#WIDTH(8));
        register reg6(#WIDTH(8));
        register reg7(#WIDTH(8));
        register reg8(#WIDTH(8));
        //reg_interface register;
        }
        }

        always {
        reset_cond.in = ~rst_n; // input raw inverted reset signal
        rst = reset_cond.out;   // conditione2d reset

        // connect inputs of avr
        avr.cclk = cclk;
        avr.spi_ss = spi_ss;
        avr.spi_mosi = spi_mosi;
        avr.spi_sck = spi_sck;
        avr.rx = avr_tx;
        avr.channel = hf;           // ADC is unused so disable
        avr.tx_block = avr_rx_busy; // block TX when AVR is busy
        avr.tx_data = bz;
        avr.new_tx_data = bz;

        // connect outputs of avr
        spi_miso = avr.spi_miso;
        spi_channel = avr.spi_channel;
        avr_rx = avr.tx;

        //initialize registers en and data
        reg1.en = 0;        reg1.data = 8b1;
        reg2.en = 0;        reg2.data = 8b1;
        reg3.en = 0;        reg3.data = 8b1;
        reg4.en = 0;        reg4.data = 8b1;
        reg5.en = 0;        reg5.data = 8b1;
        reg6.en = 0;        reg6.data = 8b1;
        reg7.en = 0;        reg7.data = 8b1;
        reg8.en = 0;        reg8.data = 8b1;



        //Converting keypad analog input to alphabet
        if(eIGHT==1 && fOUR==1){
        //a
        counter.d = counter.q + 1; //increment counter to identify number of alphabets successfully entered
        //also corresponds to adress of register in which
        case (counter.q){
        0:
        reg1.en = 1;
        reg1.data = c{b0001,b0000};
        1:
        reg2.en = 1;
        reg2.data = c{b0010,b0000};
        2:
        reg2.en = 1;
        reg2.data = c{b0011,b0000};
        3:
        reg4.en = 1;
        reg4.data = c{b0100,b0000};
        4:
        reg5.en = 1;
        reg5.data = c{b0101,b0000};
        5:
        reg6.en = 1;
        reg6.data = c{b0110,b0000};


        }

        }

        if(eIGHT==1 && tHREE==1){
        //e
        counter.d = counter.q + 1; //increment counter to identify number of alphabets successfully entered
        //also corresponds to adress of register in which
        case (counter.q){
        0:
        reg1.en = 1;
        reg1.data = c{b0001,b0001};
        1:
        reg2.en = 1;
        reg2.data = c{b0010,b0001};
        2:
        reg2.en = 1;
        reg2.data = c{b0011,b0001};
        3:
        reg4.en = 1;
        reg4.data = c{b0100,b0001};
        4:
        reg5.en = 1;
        reg5.data = c{b0101,b0001};
        5:
        reg6.en = 1;
        reg6.data = c{b0110,b0001};

        }
        }
        if(eIGHT==1 && tWO==1){
        //i
        counter.d = counter.q + 1; //increment counter to identify number of alphabets successfully entered
        //also corresponds to adress of register in which
        case (counter.q){
        0:
        reg1.en = 1;
        reg1.data = c{b0001,b0010};
        1:
        reg2.en = 1;
        reg2.data = c{b0010,b0010};
        2:
        reg2.en = 1;
        reg2.data = c{b0011,b0010};
        3:
        reg4.en = 1;
        reg4.data = c{b0100,b0010};
        4:
        reg5.en = 1;
        reg5.data = c{b0101,b0010};
        5:
        reg6.en = 1;
        reg6.data = c{b0110,b0010};

        }}
        if(eIGHT==1 && oNE==1){
        //o
        counter.d = counter.q + 1; //increment counter to identify number of alphabets successfully entered
        //also corresponds to adress of register in which
        case (counter.q){
        0:
        reg1.en = 1;
        reg1.data = c{b0001,b0011};
        1:
        reg2.en = 1;
        reg2.data = c{b0010,b0011};
        2:
        reg2.en = 1;
        reg2.data = c{b0011,b0011};
        3:
        reg4.en = 1;
        reg4.data = c{b0100,b0011};
        4:
        reg5.en = 1;
        reg5.data = c{b0101,b0011};
        5:
        reg6.en = 1;
        reg6.data = c{b0110,b0011};

        }}

        if(sEVEN==1 && fOUR==1){
        //u
        counter.d = counter.q + 1; //increment counter to identify number of alphabets successfully entered
        //also corresponds to adress of register in which
        case (counter.q){
        0:
        reg1.en = 1;
        reg1.data = c{b0001,b0100};
        1:
        reg2.en = 1;
        reg2.data = c{b0010,b0100};
        2:
        reg2.en = 1;
        reg2.data = c{b0011,b0100};
        3:
        reg4.en = 1;
        reg4.data = c{b0100,b0100};
        4:
        reg5.en = 1;
        reg5.data = c{b0101,b0100};
        5:
        reg6.en = 1;
        reg6.data = c{b0110,b0100};

        }}
        if(sEVEN==1 && tHREE==1){
        //b
        counter.d = counter.q + 1; //increment counter to identify number of alphabets successfully entered
        //also corresponds to adress of register in which
        case (counter.q){
        0:
        reg1.en = 1;
        reg1.data = c{b0001,b0101};

        1:
        reg2.en = 1;
        reg2.data = c{b0010,b0101};
        2:
        reg2.en = 1;
        reg2.data = c{b0011,b0101};
        3:
        reg4.en = 1;
        reg4.data = c{b0100,b0101};
        4:
        reg5.en = 1;
        reg5.data = c{b0101,b0101};
        5:
        reg6.en = 1;
        reg6.data = c{b0110,b0101};

        }}
        if(sEVEN==1 && tWO==1){
        //c
        counter.d = counter.q + 1; //increment counter to identify number of alphabets successfully entered
        //also corresponds to adress of register in which
        case (counter.q){
        0:
        reg1.en = 1;
        reg1.data = c{b0001,b0110};
        1:
        reg2.en = 1;
        reg2.data = c{b0010,b0110};
        2:
        reg2.en = 1;
        reg2.data = c{b0011,b0110};
        3:
        reg4.en = 1;
        reg4.data = c{b0100,b0110};
        4:
        reg5.en = 1;
        reg5.data = c{b0101,b0110};
        5:
        reg6.en = 1;
        reg6.data = c{b0110,b0110};
        }}
        if(sEVEN==1 && oNE==1){
        //d
        counter.d = counter.q + 1; //increment counter to identify number of alphabets successfully entered
        //also corresponds to adress of register in which
        case (counter.q){
        0:
        reg1.en = 1;
        reg1.data = c{b0001,b0111};
        1:
        reg2.en = 1;
        reg2.data = c{b0010,b0111};
        2:
        reg2.en = 1;
        reg2.data = c{b0011,b0111};
        3:
        reg4.en = 1;
        reg4.data = c{b0100,b0111};
        4:
        reg5.en = 1;
        reg5.data = c{b0101,b0111};
        5:
        reg6.en = 1;
        reg6.data = c{b0110,b0111};


        }}

        if(sIX==1 && fOUR==1){
        //f
        counter.d = counter.q + 1; //increment counter to identify number of alphabets successfully entered
        //also corresponds to adress of register in which
        case (counter.q){
        0:
        reg1.en = 1;
        reg1.data = c{b0001,b1000};
        1:
        reg2.en = 1;
        reg2.data = c{b0010,b1000};
        2:
        reg2.en = 1;
        reg2.data = c{b0011,b1000};
        3:
        reg4.en = 1;
        reg4.data = c{b0100,b1000};
        4:
        reg5.en = 1;
        reg5.data = c{b0101,b1000};
        5:
        reg6.en = 1;
        reg6.data = c{b0110,b1000};

        }}
        if(sIX==1 && tHREE==1){
        //g
        counter.d = counter.q + 1; //increment counter to identify number of alphabets successfully entered
        //also corresponds to adress of register in which
        case (counter.q){
        0:
        reg1.en = 1;
        reg1.data = c{b0001,b1001};
        1:
        reg2.en = 1;
        reg2.data = c{b0010,b1001};
        2:
        reg2.en = 1;
        reg2.data = c{b0011,b1001};
        3:
        reg4.en = 1;
        reg4.data = c{b0100,b1001};
        4:
        reg5.en = 1;
        reg5.data = c{b0101,b1001};
        5:
        reg6.en = 1;
        reg6.data = c{b0110,b1001};

        }}
        if(sIX==1 && tWO==1){
        //h
        counter.d = counter.q + 1; //increment counter to identify number of alphabets successfully entered
        //also corresponds to adress of register in which
        case (counter.q){
        0:
        reg1.en = 1;
        reg1.data = c{b0001,b1010};
        1:
        reg2.en = 1;
        reg2.data = c{b0010,b1010};
        2:
        reg2.en = 1;
        reg2.data = c{b0011,b1010};
        3:
        reg4.en = 1;
        reg4.data = c{b0100,b1010};
        4:
        reg5.en = 1;
        reg5.data = c{b0101,b1010};
        5:
        reg6.en = 1;
        reg6.data = c{b0110,b1010};

        }}

        if(sIX==1 && oNE==1){
        //m
        counter.d = counter.q + 1; //increment counter to identify number of alphabets successfully entered
        //also corresponds to adress of register in which
        case (counter.q){
        0:
        reg1.en = 1;
        reg1.data = c{b0001,b1011};
        1:
        reg2.en = 1;
        reg2.data = c{b0010,b1011};
        2:
        reg2.en = 1;
        reg2.data = c{b0011,b1011};
        3:
        reg4.en = 1;
        reg4.data = c{b0100,b1011};
        4:
        reg5.en = 1;
        reg5.data = c{b0101,b1011};
        5:
        reg6.en = 1;
        reg6.data = c{b0110,b1011};

        }}

        if(fIVE==1 && fOUR==1){
        //n
        counter.d = counter.q + 1; //increment counter to identify number of alphabets successfully entered
        //also corresponds to adress of register in which
        case (counter.q){
        0:
        reg1.en = 1;
        reg1.data = c{b0001,b1100};
        1:
        reg2.en = 1;
        reg2.data = c{b0010,b1100};
        2:
        reg2.en = 1;
        reg2.data = c{b0011,b1100};
        3:
        reg4.en = 1;
        reg4.data = c{b0100,b1100};
        4:
        reg5.en = 1;
        reg5.data = c{b0101,b1100};
        5:
        reg6.en = 1;
        reg6.data = c{b0110,b1100};

        }}
        if(fIVE==1 && tHREE==1){
        //r
        counter.d = counter.q + 1; //increment counter to identify number of alphabets successfully entered
        //also corresponds to adress of register in which
        case (counter.q){
        0:
        reg1.en = 1;
        reg1.data = c{b0001,b1101};
        1:
        reg2.en = 1;
        reg2.data = c{b0010,b1101};
        2:
        reg2.en = 1;
        reg2.data = c{b0011,b1101};
        3:
        reg4.en = 1;
        reg4.data = c{b0100,b1101};
        4:
        reg5.en = 1;
        reg5.data = c{b0101,b1101};
        5:
        reg6.en = 1;
        reg6.data = c{b0110,b1101};

        }}

        if(fIVE==1 && tWO==1){
        //s
        counter.d = counter.q + 1; //increment counter to identify number of alphabets successfully entered
        //also corresponds to adress of register in which
        case (counter.q){
        0:
        reg1.en = 1;
        reg1.data = c{b0001,b1110};
        1:
        reg2.en = 1;
        reg2.data = c{b0010,b1110};
        2:
        reg2.en = 1;
        reg2.data = c{b0011,b1110};
        3:
        reg4.en = 1;
        reg4.data = c{b0100,b1110};
        4:
        reg5.en = 1;
        reg5.data = c{b0101,b1110};
        5:
        reg6.en = 1;
        reg6.data = c{b0110,b1110};

        }}
        if(fIVE==1 && oNE==1){
        //t
        counter.d = counter.q + 1; //increment counter to identify number of alphabets successfully entered
        //also corresponds to adress of register in which
        case (counter.q){
        0:
        reg1.en = 1;
        reg1.data = c{b0001,b1111};
        1:
        reg2.en = 1;
        reg2.data = c{b0010,b1111};
        2:
        reg2.en = 1;
        reg2.data = c{b0011,b1111};
        3:
        reg4.en = 1;
        reg4.data = c{b0100,b1111};
        4:
        reg5.en = 1;
        reg5.data = c{b0101,b1111};
        5:
        reg6.en = 1;
        reg6.data = c{b0110,b1111};
        }}

        //Inputs from player 2
        if(eight2==1 && four2==1){
        //a
        reg7.en = 1;
        reg7.data = 8b0000;
        reg7.en = 0;
        if (reg7.out[3:0] == reg1.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg2.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg3.out[3:0]){
        //display position on seven segment          
        }
        else{
        //next state of hangman
        }
        }
        }
        }
        if(eight2==1 && three2==1){
        //e
        reg7.en = 1;
        reg7.data = 8b0001;
        reg7.en = 0;
        if (reg7.out[3:0] == reg1.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg2.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg3.out[3:0]){
        //display position on seven segment          
        }
        else{
        //next state of hangman
        }
        }
        }
        }
        if(eight2==1 && two2==1){
        //i
        reg7.en = 1;
        reg7.data = 8b0010;
        reg7.en = 0;
        if (reg7.out[3:0] == reg1.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg2.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg3.out[3:0]){
        //display position on seven segment          
        }
        else{
        //next state of hangman
        }
        }
        }
        }
        if(eight2==1 && one2==1){
        //o
        reg7.en = 1;
        reg7.data = 8b0011;
        reg7.en = 0;
        if (reg7.out[3:0] == reg1.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg2.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg3.out[3:0]){
        //display position on seven segment          
        }
        else{
        //next state of hangman
        }
        }
        }
        }
        if(seven2==1 && four2==1){
        //u
        reg7.en = 1;
        reg7.data = 8b0100;
        reg7.en = 0;
        if (reg7.out[3:0] == reg1.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg2.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg3.out[3:0]){
        //display position on seven segment          
        }
        else{
        //next state of hangman
        }
        }
        }
        }
        if(seven2==1 && three2==1){
        //b
        reg7.en = 1;
        reg7.data = 8b0101;
        reg7.en = 0;
        if (reg7.out[3:0] == reg1.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg2.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg3.out[3:0]){
        //display position on seven segment          
        }
        else{
        //next state of hangman
        }
        }
        }
        }
        if(seven2==1 && two2==1){
        //c
        reg7.en = 1;
        reg7.data = 8b0110;
        reg7.en = 0;
        if (reg7.out[3:0] == reg1.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg2.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg3.out[3:0]){
        //display position on seven segment          
        }
        else{
        //next state of hangman
        }
        }
        }
        }
        if(seven2==1 && one2==1){
        //d
        reg7.en = 1;
        reg7.data = 8b0111;
        reg7.en = 0;
        if (reg7.out[3:0] == reg1.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg2.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg3.out[3:0]){
        //display position on seven segment          
        }
        else{
        //next state of hangman
        }
        }
        }
        }
        if(six2==1 && four2==1){
        //f
        reg7.en = 1;
        reg7.data = 8b1000;
        reg7.en = 0;
        if (reg7.out[3:0] == reg1.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg2.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg3.out[3:0]){
        //display position on seven segment          
        }
        else{
        //next state of hangman
        }
        }
        }
        }
        if(six2==1 && three2==1){
        //g
        reg7.en = 1;
        reg7.data = 8b1001;
        reg7.en = 0;
        if (reg7.out[3:0] == reg1.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg2.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg3.out[3:0]){
        //display position on seven segment          
        }
        else{
        //next state of hangman
        }
        }
        }
        }
        if(six2==1 && two2==1){
        //h
        reg7.en = 1;
        reg7.data = 8b1010;
        reg7.en = 0;
        if (reg7.out[3:0] == reg1.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg2.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg3.out[3:0]){
        //display position on seven segment          
        }
        else{
        //next state of hangman
        }
        }
        }
        }
        if(six2==1 && one2==1){
        //m
        reg7.en = 1;
        reg7.data = 8b1011;
        reg7.en = 0;
        if (reg7.out[3:0] == reg1.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg2.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg3.out[3:0]){
        //display position on seven segment          
        }
        else{
        //next state of hangman
        }
        }
        }
        }
        if(five2==1 && four2==1){
        //n
        reg7.en = 1;
        reg7.data = 8b1100;
        reg7.en = 0;
        if (reg7.out[3:0] == reg1.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg2.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg3.out[3:0]){
        //display position on seven segment          
        }
        else{
        //next state of hangman
        }
        }
        }
        }
        if(five2==1 && three2==1){
        //r
        reg7.en = 1;
        reg7.data = 8b1101;
        reg7.en = 0;
        if (reg7.out[3:0] == reg1.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg2.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg3.out[3:0]){
        //display position on seven segment          
        }
        else{
        //next state of hangman
        }
        }
        }
        }
        if(five2==1 && two2==1){
        //s
        reg7.en = 1;
        reg7.data = 8b1110;
        reg7.en = 0;
        if (reg7.out[3:0] == reg1.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg2.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg3.out[3:0]){
        //display position on seven segment          
        }
        else{
        //next state of hangman
        }
        }
        }
        }
        if(five2==1 && one2==1){
        //t
        reg7.en = 1;
        reg7.data = 8b1111;
        reg7.en = 0;
        if (reg7.out[3:0] == reg1.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg2.out[3:0]){
        //display position on seven segment          
        }
        else{
        if (reg7.out[3:0] == reg3.out[3:0]){
        //display position on seven segment          
        }
        else{
        //next state of hangman
        }
        }
        }
        }


        }
        }
